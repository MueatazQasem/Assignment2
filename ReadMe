Emergency App
EmergencyApp is a comprehensive mobile application designed to provide essential emergency services and information to users. The app offers a range of features and functionalities to assist users in emergency situations. It consists of three main screens: the banner screen, the profile screen, and the service screen.

Functionalities
Banner Screen
The banner screen serves as the entry point for users when they launch the app. It provides a user-friendly interface for users to register and access emergency services. The following functionalities are available on the banner screen:
User Registration: Users can create an account by entering their name, email, and password using the provided input fields.

Profile Screen
The profile screen displays the user's registration information. It allows users to review the information they entered on the banner screen. The following functionalities are available on the profile screen:
Name Display: The user's name is displayed in a text field, which is prepopulated with the entered name from the banner screen.
Email Display: The user's email address is displayed in a text field, which is prepopulated with the entered email from the banner screen.
Password Display: The user's password is displayed in a text field, which is prepopulated with the entered password from the banner screen.


Service Screen

The service screen provides information about the app's services. It includes the following functionalities:

- Contact Us: Users can click on the "Contact Us" button to navigate to the Contact screen and get in touch with the app's support team.
- About: Users can click on the "About" button to navigate to the About screen and learn more about the app.
- Profile: Users can click on the "Profile" button to navigate back to the profile screen and view their registration information.
- CPR: Users can click on the CPR image to navigate to the CPR screen and learn about performing CPR.
- Wounds: Users can click on the wounds image to navigate to the Wounds screen and learn about treating wounds.
- Drowning: Users can click on the drowning image to navigate to the Drowning screen and learn about rescuing drowning victims.
- Broken Bone: Users can click on the broken bone image to navigate to the Broken Bone screen and learn about providing first aid for broken bones.


UserScreen

The `UserScreen` is a Compose-based screen that allows users to perform CRUD operations on user data. It provides a user interface to add, retrieve, update, and delete user information.

## CRUD Operations

The following CRUD operations are supported in the `UserScreen`:

### Create (Add User)

The "Add User" functionality allows users to create a new user by providing the following information:

- Username: The username of the user.
- Email: The email address of the user.
- Password: The password of the user.

Upon clicking the "Add User" button, the user information is sent to the backend or repository for storage.

### Read (Get User / Get All Users)

The "Get User" functionality allows users to retrieve information about a specific user by providing the username. It fetches the user data from the repository and displays it on the screen.

The "Get All Users" functionality retrieves a list of all users from the repository and displays them on the screen. Optionally, users can filter the list by providing a username.

### Update (Update User)

The "Update User" functionality allows users to update the password of an existing user. Users can provide the username and the new password to update the user's information. Upon clicking the "Update User" button, the updated user data is sent to the repository for modification.

### Delete (Delete User)

The "Delete User" functionality allows users to delete a user from the system. Users need to provide the username of the user they want to delete. Upon confirmation, the user data is removed from the repository.

## Usage

To use the `UserScreen` and its CRUD operations, you need to have the necessary dependencies and setup in your project. Make sure you have the required Compose and repository dependencies.

1. Create an instance of the `UserRepository` class, which handles the communication with the backend or data storage.

2. Initialize the `UserScreenModel` by providing the `UserRepository` instance.

3. Use the provided Composable function `UserScreen.Content()` to display the `UserScreen` UI and interact with the CRUD operations.

4. Users can perform CRUD operations by entering the required information in the provided input fields and clicking the corresponding buttons.

## Contributing

Contributions to the `UserScreen` and its CRUD operations are welcome! If you find any issues or have suggestions for improvement, please open an issue or submit a pull request.




Getting Started

To run the app locally, follow these steps:

1. Clone the repository: `git clone https://github.com/your/repo.git`
2. Open the project in your preferred IDE or text editor.
3. Build and run the project using the appropriate commands for your development environment.
4. The app should open, displaying the banner screen.

Technologies Used

MyApp is built using the following technologies:

- Kotlin: The primary programming language used for app development.
- Jetpack Compose: The modern UI toolkit for building native Android apps.
- Android Studio: The integrated development environment (IDE) for Android app development.



